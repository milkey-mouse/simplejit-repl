use super::Expr;

pub function -> (String, Vec<String>, String, Vec<Expr>)
    = def:function_definition
      stmts:statements
      _ "}" _ "\n" _
      { (def.0, def.1, def.2, stmts) }

pub function_definition -> (String, Vec<String>, String)
    = [ \t\n]* "fn" _ name: identifier _
      "(" params:((_ i:identifier _ {i}) ** ",") ")" _
      "->" _
      "(" returns:(_ i:identifier _ {i}) ")" _
      "{" _ "\n"
      { (name, params, returns) }

statements -> Vec<Expr>
    = s:(statement*) { s }

pub statement -> Expr
    = _ e:expression _ "\n" { e }

expression -> Expr
    = if_else
    / while_loop
    / i:identifier _ "=" _ e:expression { Expr::Assign(i, Box::new(e)) }
    / compare

if_else -> Expr
    = "if" _ e:expression _ "{" _ "\n"
      then_body:statements _ "}" _ "else" _ "{" _ "\n"
      else_body:statements _ "}"
      { Expr::IfElse(Box::new(e), then_body, else_body) }

while_loop -> Expr
    = "while" _ e:expression _ "{" _ "\n"
      loop_body:statements _ "}"
      { Expr::WhileLoop(Box::new(e), loop_body) }

compare -> Expr
    = a:sum _ "==" _ b:compare { Expr::Eq(Box::new(a), Box::new(b)) }
    / a:sum _ "!=" _ b:compare { Expr::Ne(Box::new(a), Box::new(b)) }
    / a:sum _ "<"  _ b:compare { Expr::Lt(Box::new(a), Box::new(b)) }
    / a:sum _ "<=" _ b:compare { Expr::Le(Box::new(a), Box::new(b)) }
    / a:sum _ ">"  _ b:compare { Expr::Gt(Box::new(a), Box::new(b)) }
    / a:sum _ ">=" _ b:compare { Expr::Ge(Box::new(a), Box::new(b)) }
    / sum

sum -> Expr
    = a:product _ "+" _ b:sum { Expr::Add(Box::new(a), Box::new(b)) }
    / a:product _ "-" _ b:sum { Expr::Sub(Box::new(a), Box::new(b)) }
    / product

product -> Expr
    = a:call_or_identifier_or_literal _ "*" _ b:product { Expr::Mul(Box::new(a), Box::new(b)) }
    / a:call_or_identifier_or_literal _ "/" _ b:product { Expr::Div(Box::new(a), Box::new(b)) }
    / call_or_identifier_or_literal

call_or_identifier_or_literal -> Expr
    = i:identifier _ "(" args:((_ e:expression _ {e}) ** ",") ")" { Expr::Call(i, args) }
    / i:identifier { Expr::Identifier(i) }
    / literal

identifier -> String
    = n:$([a-zA-Z_][a-zA-Z0-9_]*) { n.to_owned() }

literal -> Expr
    = n:$([0-9]+) { Expr::Literal(n.to_owned()) }
    / "&" i:identifier { Expr::GlobalDataAddr(i) }

_ = [ \t]*
